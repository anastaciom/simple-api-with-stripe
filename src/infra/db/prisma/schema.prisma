generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypeOfCharge {
  MONTHLY
  ANNUAL
}

model User {
  id                 String              @id @default(uuid())
  stripe_customer_id String?             @unique
  avatar_url         String?
  name               String
  email              String              @unique
  password           String
  token_version      Int                 @default(1)
  created_at         DateTime            @default(now()) @db.Timestamptz
  updated_at         DateTime            @updatedAt @db.Timestamptz
  UserSubscriptions  UserSubscriptions[]
  UserRole           UserRoles[]

  @@unique([stripe_customer_id, id])
  @@map("users")
}

model Roles {
  id               String             @id @default(uuid())
  name             String             @unique
  permissions      Permissions[]      @relation("RoleToPermission")
  users            UserRoles[]
  RoleToPermission RoleToPermission[]

  @@map("roles")
}

model RoleToPermission {
  role_id       String
  permission_id String
  role          Roles       @relation(fields: [role_id], references: [id])
  permission    Permissions @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
  @@map("role_to_permission")
}

model Permissions {
  id               String             @id @default(uuid())
  name             String             @unique
  description      String             @db.VarChar(255)
  roles            Roles[]            @relation("RoleToPermission")
  RoleToPermission RoleToPermission[]

  @@map("permissions")
}

model UserRoles {
  user_id String
  role_id String
  user    User   @relation(fields: [user_id], references: [id])
  role    Roles  @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@map("user_roles")
}

model UserSubscriptions {
  id                      String        @id @default(uuid())
  user_id                 String
  user_stripe_customer_id String
  subscription_id         String
  registration_date       DateTime      @default(now()) @db.Timestamptz
  cancellation_date       DateTime?     @db.Timestamptz
  expires_at              DateTime?     @db.Timestamptz
  is_active               Boolean       @default(true)
  user                    User          @relation(fields: [user_id, user_stripe_customer_id], references: [id, stripe_customer_id])
  subscription            Subscriptions @relation(fields: [subscription_id], references: [id])

  @@map("user_subscriptions")
}

model Subscriptions {
  id                String              @id @default(uuid())
  price_id_stripe   String              @unique
  description       String?             @db.VarChar(255)
  name              String              @unique
  price             Decimal             @db.Decimal(10, 2)
  type_of_charge    TypeOfCharge
  is_active         Boolean             @default(true)
  theme_color       String              @db.VarChar(50)
  created_at        DateTime            @default(now()) @db.Timestamptz
  updated_at        DateTime            @updatedAt @db.Timestamptz
  UserSubscriptions UserSubscriptions[]

  @@map("subscriptions")
}
